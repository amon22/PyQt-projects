C:\Python27\python.exe C:/Users/FöldesiZsombor/PycharmProjects/Stuff/smart-mirror/test.py
Traceback (most recent call last):
  File "C:/Users/F�ldesiZsombor/PycharmProjects/Stuff/smart-mirror/test.py", line 6, in <module>
    for i in range(0,forecast.get_forecast().count_weather()):
Help on Forecast in module pyowm.webapi25.forecast object:
AttributeError: 'Forecast' object has no attribute 'count_weather'

class Forecast(__builtin__.object)
 |  A class encapsulating weather forecast data for a certain location and
 |  relative to a specific time interval (forecast for every three hours or
 |  for every day)
 |
 |  :param interval: the time granularity of the forecast. May be: *'3h'* for
 |      three hours forecast or *'daily'* for daily ones
 |  :type interval: str
 |  :param reception_time: GMT UNIXtime of the forecast reception from the OWM
 |      web API
 |  :type reception_time: int
 |  :param location: the *Location* object relative to the forecast
 |  :type location: Location
 |  :param weathers: the list of *Weather* objects composing the forecast
 |  :type weathers: list
 |  :returns:  a *Forecast* instance
 |  :raises: *ValueError* when negative values are provided
 |
 |  Methods defined here:
 |
 |  __init__(self, interval, reception_time, location, weathers)
 |
 |  __iter__(self)
 |      Creates a *ForecastIterator* instance
 |
 |      :returns: a *ForecastIterator* instance
 |
 |  __len__(self)
 |      Redefine __len__ hook
 |
 |  __repr__(self)
 |
 |  count_weathers(self)
 |      Tells how many *Weather* items compose the forecast
 |
 |      :returns: the *Weather* objects total
 |
 |  get(self, index)
 |      Lookups up into the *Weather* items list for the item at the specified
 |      index
 |
 |      :param index: the index of the *Weather* object in the list
 |      :type index: int
 |      :returns: a *Weather* object
 |
 |  get_interval(self)
 |      Returns the time granularity of the forecast
 |
 |      :returns: str
 |
 |  get_location(self)
 |      Returns the Location object relative to the forecast
 |
 |      :returns: a *Location* object
 |
 |  get_reception_time(self, timeformat='unix')
 |      Returns the GMT time telling when the forecast was received
 |          from the OWM web API
 |
 |      :param timeformat: the format for the time value. May be:
 |          '*unix*' (default) for UNIX time or '*iso*' for ISO8601-formatted
 |          string in the format ``YYYY-MM-DD HH:MM:SS+00``
 |      :type timeformat: str
 |      :returns: an int or a str
 |      :raises: ValueError
 |
 |  get_weathers(self)
 |      Returns a copy of the *Weather* objects list composing the forecast
 |
 |      :returns: a list of *Weather* objects
 |
 |  set_interval(self, interval)
 |      Sets the time granularity of the forecast
 |
 |      :param interval: the time granularity of the forecast, may be "3h" or
 |          "daily"
 |      :type interval: str
 |
 |  to_JSON(self)
 |      Dumps object fields into a JSON formatted string
 |
 |      :returns: the JSON string
 |
 |  to_XML(self, xml_declaration=True, xmlns=True)
 |      Dumps object fields to an XML-formatted string. The 'xml_declaration'
 |      switch  enables printing of a leading standard XML line containing XML
 |      version and encoding. The 'xmlns' switch enables printing of qualified
 |      XMLNS prefixes.
 |
 |      :param XML_declaration: if ``True`` (default) prints a leading XML
 |          declaration line
 |      :type XML_declaration: bool
 |      :param xmlns: if ``True`` (default) prints full XMLNS prefixes
 |      :type xmlns: bool
 |      :returns: an XML-formatted string
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)

None

Process finished with exit code 1
