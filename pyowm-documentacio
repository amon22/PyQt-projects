C:\Python27\python.exe C:/Users/FÃ¶ldesiZsombor/PycharmProjects/Stuff/smart-mirror/test.py
Help on OWM25 in module pyowm.webapi25.owm25 object:

class OWM25(pyowm.abstractions.owm.OWM)
 |  OWM subclass providing methods for each OWM web API 2.5 endpoint. The class
 |  is instantiated with *jsonparser* subclasses, each one parsing the response
 |  payload of a specific API endpoint
 |
 |  :param parsers: the dictionary containing *jsonparser* concrete instances
 |      to be used as parsers for OWM web API 2.5 responses
 |  :type parsers: dict
 |  :param API_key: the OWM web API key (defaults to ``None``)
 |  :type API_key: str
 |  :param cache: a concrete implementation of class *OWMCache* serving as the
 |      cache provider (defaults to a *NullCache* instance)
 |  :type cache: an *OWMCache* concrete instance
 |  :param language: the language in which you want text results to be returned.
 |        It's a two-characters string, eg: "en", "ru", "it". Defaults to: "en"
 |  :type language: str
 |  :param subscription_type: the type of OWM web API subscription to be wrapped.
 |         Can be 'free' (free subscription) or 'pro' (paid subscription),
 |         Defaults to: 'free'
 |  :type subscription_type: str
 |  :returns: an *OWM25* instance
 |
 |  Method resolution order:
 |      OWM25
 |      pyowm.abstractions.owm.OWM
 |      __builtin__.object
 |
 |  Methods defined here:
 |
 |  __init__(self, parsers, API_key=None, cache=<pyowm.caches.nullcache.NullCache>, language='en', subscription_type='free')
 |
 |  __repr__(self)
 |
 |  city_id_registry(self)
 |      Gives the *CityIDRegistry* singleton instance that can be used to lookup
 |      for city IDs.
 |
 |      :returns: a *CityIDRegistry* instance
 |
 |  daily_forecast(self, name, limit=None)
 |      Queries the OWM web API for daily weather forecast for the specified
 |      location (eg: "London,uk"). A *Forecaster* object is returned,
 |      containing a *Forecast* instance covering a global streak of fourteen
 |      days by default: this instance encapsulates *Weather* objects, with a
 |      time interval of one day one from each other
 |
 |      :param name: the location's toponym
 |      :type name: str
 |      :param limit: the maximum number of daily *Weather* items to be
 |          retrieved (default is ``None``, which stands for any number of
 |          items)
 |      :type limit: int or ``None``
 |      :returns: a *Forecaster* instance or ``None`` if forecast data is not
 |          available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if negative values are supplied for limit
 |
 |  daily_forecast_at_coords(self, lat, lon, limit=None)
 |      Queries the OWM web API for daily weather forecast for the specified
 |      geographic coordinate (eg: latitude: 51.5073509, longitude: -0.1277583).
 |      A *Forecaster* object is returned, containing a *Forecast* instance
 |      covering a global streak of fourteen days by default: this instance
 |      encapsulates *Weather* objects, with a time interval of one day one
 |      from each other
 |
 |      :param lat: location's latitude, must be between -90.0 and 90.0
 |      :type lat: int/float
 |      :param lon: location's longitude, must be between -180.0 and 180.0
 |      :type lon: int/float
 |      :param limit: the maximum number of daily *Weather* items to be
 |          retrieved (default is ``None``, which stands for any number of
 |          items)
 |      :type limit: int or ``None``
 |      :returns: a *Forecaster* instance or ``None`` if forecast data is not
 |          available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if negative values are supplied for limit
 |
 |  daily_forecast_at_id(self, id, limit=None)
 |      Queries the OWM web API for daily weather forecast for the specified
 |      city ID (eg: 5128581). A *Forecaster* object is returned, containing
 |      a *Forecast* instance covering a global streak of fourteen days by
 |      default: this instance encapsulates *Weather* objects, with a time
 |      interval of one day one from each other
 |
 |      :param id: the location's city ID
 |      :type id: int
 |      :param limit: the maximum number of daily *Weather* items to be
 |          retrieved (default is ``None``, which stands for any number of
 |          items)
 |      :type limit: int or ``None``
 |      :returns: a *Forecaster* instance or ``None`` if forecast data is not
 |          available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if negative values are supplied for limit
 |
 |  get_API_key(self)
 |      Returns the str OWM API key
 |
 |      :returns: a str
 |
 |  get_API_version(self)
 |      Returns the currently supported OWM web API version
 |
 |      :returns: the OWM web API version string
 |
 |  get_language(self)
 |      Returns the language in which the OWM web API shall return text results
 |
 |      :returns: the language
 |
 |  get_subscription_type(self)
 |      Returns the OWM API subscription type
 |
 |      :returns: the subscription type
 |
 |  get_version(self)
 |      Returns the current version of the PyOWM library
 |
 |      :returns: the current PyOWM library version string
 |
 |  is_API_online(self)
 |      Returns True if the OWM web API is currently online. A short timeout
 |      is used to determine API service availability.
 |
 |      :returns: bool
 |
 |  set_API_key(self, API_key)
 |      Updates the str OWM API key
 |
 |      :param API_key: the new str API key
 |      :type API_key: str
 |
 |  set_language(self, language)
 |      Sets the language in which the OWM web API shall return text results
 |
 |      :param language: the new two-characters language (eg: "ru")
 |      :type API_key: str
 |
 |  station_at_coords(self, lat, lon, limit=None)
 |      Queries the OWM web API for weather stations nearest to the
 |      specified geographic coordinates (eg: latitude: 51.5073509,
 |      longitude: -0.1277583). A list of *Station* objects is returned,
 |      this instance encapsulates a last reported *Weather* object.
 |
 |      :param lat: location's latitude, must be between -90.0 and 90.0
 |      :type lat: int/float
 |      :param lon: location's longitude, must be between -180.0 and 180.0
 |      :type lon: int/float
 |      :param cnt: the maximum number of *Station* items to be retrieved
 |          (default is ``None``, which stands for any number of items)
 |      :type cnt: int or ``None``
 |
 |      :returns: a list of *Station* objects or ``None`` if station data is
 |          not available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached
 |
 |  station_day_history(self, station_ID, limit=None)
 |      Queries the OWM web API for historic weather data measurements for the
 |      specified meteostation (eg: 2865), sampled once a day.
 |      A *Historian* object instance is returned, encapsulating a
 |      *StationHistory* objects which contains the measurements. The total
 |      number of retrieved data points can be limited using the appropriate
 |      parameter
 |
 |      :param station_ID: the numeric ID of the meteostation
 |      :type station_ID: int
 |      :param limit: the maximum number of data points the result shall
 |          contain (default is ``None``, which stands for any number of data
 |          points)
 |      :type limit: int or ``None``
 |      :returns: a *Historian* instance or ``None`` if data is not
 |          available for the specified meteostation
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if the limit value is negative
 |
 |  station_hour_history(self, station_ID, limit=None)
 |      Queries the OWM web API for historic weather data measurements for the
 |      specified meteostation (eg: 2865), sampled once a hour.
 |      A *Historian* object instance is returned, encapsulating a
 |      *StationHistory* objects which contains the measurements. The total
 |      number of retrieved data points can be limited using the appropriate
 |      parameter
 |
 |      :param station_ID: the numeric ID of the meteostation
 |      :type station_ID: int
 |      :param limit: the maximum number of data points the result shall
 |          contain (default is ``None``, which stands for any number of data
 |          points)
 |      :type limit: int or ``None``
 |      :returns: a *Historian* instance or ``None`` if data is not
 |          available for the specified meteostation
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if the limit value is negative
 |
 |  station_tick_history(self, station_ID, limit=None)
 |      Queries the OWM web API for historic weather data measurements for the
 |      specified meteostation (eg: 2865), sampled once a minute (tick).
 |      A *StationHistory* object instance is returned, encapsulating the
 |      measurements: the total number of data points can be limited using the
 |      appropriate parameter
 |
 |      :param station_ID: the numeric ID of the meteostation
 |      :type station_ID: int
 |      :param limit: the maximum number of data points the result shall
 |          contain (default is ``None``, which stands for any number of data
 |          points)
 |      :type limit: int or ``None``
 |      :returns: a *StationHistory* instance or ``None`` if data is not
 |          available for the specified meteostation
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if the limit value is negative
 |
 |  three_hours_forecast(self, name)
 |      Queries the OWM web API for three hours weather forecast for the
 |      specified location (eg: "London,uk"). A *Forecaster* object is
 |      returned, containing a *Forecast* instance covering a global streak of
 |      five days: this instance encapsulates *Weather* objects, with a time
 |      interval of three hours one from each other
 |
 |      :param name: the location's toponym
 |      :type name: str
 |      :returns: a *Forecaster* instance or ``None`` if forecast data is not
 |          available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached
 |
 |  three_hours_forecast_at_coords(self, lat, lon)
 |      Queries the OWM web API for three hours weather forecast for the
 |      specified geographic coordinate (eg: latitude: 51.5073509,
 |      longitude: -0.1277583). A *Forecaster* object is returned,
 |      containing a *Forecast* instance covering a global streak of
 |      five days: this instance encapsulates *Weather* objects, with a time
 |      interval of three hours one from each other
 |
 |      :param lat: location's latitude, must be between -90.0 and 90.0
 |      :type lat: int/float
 |      :param lon: location's longitude, must be between -180.0 and 180.0
 |      :type lon: int/float
 |      :returns: a *Forecaster* instance or ``None`` if forecast data is not
 |          available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached
 |
 |  three_hours_forecast_at_id(self, id)
 |      Queries the OWM web API for three hours weather forecast for the
 |      specified city ID (eg: 5128581). A *Forecaster* object is returned,
 |      containing a *Forecast* instance covering a global streak of
 |      five days: this instance encapsulates *Weather* objects, with a time
 |      interval of three hours one from each other
 |
 |      :param id: the location's city ID
 |      :type id: int
 |      :returns: a *Forecaster* instance or ``None`` if forecast data is not
 |          available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached
 |
 |  weather_around_coords(self, lat, lon, limit=None)
 |      Queries the OWM web API for the currently observed weather in all the
 |      locations in the proximity of the specified coordinates.
 |
 |      :param lat: location's latitude, must be between -90.0 and 90.0
 |      :type lat: int/float
 |      :param lon: location's longitude, must be between -180.0 and 180.0
 |      :type lon: int/float
 |      :param limit: the maximum number of *Observation* items in the returned
 |          list (default is ``None``, which stands for any number of items)
 |      :param limit: int or ``None``
 |      :returns: a list of *Observation* objects or ``None`` if no weather
 |          data is available
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* when coordinates values are out of bounds or
 |          negative values are provided for limit
 |
 |  weather_at_coords(self, lat, lon)
 |      Queries the OWM web API for the currently observed weather at the
 |      specified geographic (eg: 51.503614, -0.107331).
 |
 |      :param lat: the location's latitude, must be between -90.0 and 90.0
 |      :type lat: int/float
 |      :param lon: the location's longitude, must be between -180.0 and 180.0
 |      :type lon: int/float
 |      :returns: an *Observation* instance or ``None`` if no weather data is
 |          available
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed or *APICallException* when OWM web API can not be
 |          reached
 |
 |  weather_at_id(self, id)
 |      Queries the OWM web API for the currently observed weather at the
 |      specified city ID (eg: 5128581)
 |
 |      :param id: the location's city ID
 |      :type id: int
 |      :returns: an *Observation* instance or ``None`` if no weather data is
 |          available
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed or *APICallException* when OWM web API can not be
 |          reached
 |
 |  weather_at_place(self, name)
 |      Queries the OWM web API for the currently observed weather at the
 |      specified toponym (eg: "London,uk")
 |
 |      :param name: the location's toponym
 |      :type name: str
 |      :returns: an *Observation* instance or ``None`` if no weather data is
 |          available
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed or *APICallException* when OWM web API can not be
 |          reached
 |
 |  weather_at_places(self, pattern, searchtype, limit=None)
 |      Queries the OWM web API for the currently observed weather in all the
 |      locations whose name is matching the specified text search parameters.
 |      A twofold search can be issued: *'accurate'* (exact matching) and
 |      *'like'* (matches names that are similar to the supplied pattern).
 |
 |      :param pattern: the string pattern (not a regex) to be searched for the
 |          toponym
 |      :type pattern: str
 |      :param searchtype: the search mode to be used, must be *'accurate'* for
 |        an exact matching or *'like'* for a likelihood matching
 |      :type: searchtype: str
 |      :param limit: the maximum number of *Observation* items in the returned
 |          list (default is ``None``, which stands for any number of items)
 |      :param limit: int or ``None``
 |      :returns: a list of *Observation* objects or ``None`` if no weather
 |          data is available
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* when bad value is supplied for the search
 |          type or the maximum number of items retrieved
 |
 |  weather_at_station(self, station_id)
 |      Queries the OWM web API for the weather currently observed by a specific
 |      meteostation (eg: 29584)
 |
 |      :param station_id: the meteostation ID
 |      :type station_id: int
 |      :returns: an *Observation* instance or ``None`` if no weather data is
 |          available
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed or *APICallException* when OWM web API can not be
 |          reached
 |
 |  weather_at_stations_in_bbox(self, lat_top_left, lon_top_left, lat_bottom_right, lon_bottom_right, cluster=False, limit=None)
 |      Queries the OWM web API for the weather currently observed by
 |      meteostations inside the bounding box of latitude/longitude coords.
 |
 |      :param lat_top_left: latitude for top-left of bounding box, must be
 |          between -90.0 and 90.0
 |      :type lat_top_left: int/float
 |      :param lon_top_left: longitude for top-left of bounding box
 |          must be between -180.0 and 180.0
 |      :type lon_top_left: int/float
 |      :param lat_bottom_right: latitude for bottom-right of bounding box, must
 |          be between -90.0 and 90.0
 |      :type lat_bottom_right: int/float
 |      :param lon_bottom_right: longitude for bottom-right of bounding box,
 |          must be between -180.0 and 180.0
 |      :type lon_bottom_right: int/float
 |      :param cluster: use server clustering of points
 |      :type cluster: bool
 |      :param limit: the maximum number of *Observation* items in the returned
 |          list (default is ``None``, which stands for any number of items)
 |      :param limit: int or ``None``
 |      :returns: a list of *Observation* objects or ``None`` if no weather
 |          data is available
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* when coordinates values are out of bounds or
 |          negative values are provided for limit
 |
 |  weather_history_at_id(self, id, start=None, end=None)
 |      Queries the OWM web API for weather history for the specified city ID.
 |      A list of *Weather* objects is returned. It is possible to query for
 |      weather history in a closed time period, whose boundaries can be passed
 |      as optional parameters.
 |
 |      :param id: the city ID
 |      :type id: int
 |      :param start: the object conveying the time value for the start query
 |          boundary (defaults to ``None``)
 |      :type start: int, ``datetime.datetime`` or ISO8601-formatted
 |          string
 |      :param end: the object conveying the time value for the end query
 |          boundary (defaults to ``None``)
 |      :type end: int, ``datetime.datetime`` or ISO8601-formatted string
 |      :returns: a list of *Weather* instances or ``None`` if history data is
 |          not available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if the time boundaries are not in the correct
 |          chronological order, if one of the time boundaries is not ``None``
 |          and the other is or if one or both of the time boundaries are after
 |          the current time
 |
 |  weather_history_at_place(self, name, start=None, end=None)
 |      Queries the OWM web API for weather history for the specified location
 |      (eg: "London,uk"). A list of *Weather* objects is returned. It is
 |      possible to query for weather history in a closed time period, whose
 |      boundaries can be passed as optional parameters.
 |
 |      :param name: the location's toponym
 |      :type name: str
 |      :param start: the object conveying the time value for the start query
 |          boundary (defaults to ``None``)
 |      :type start: int, ``datetime.datetime`` or ISO8601-formatted
 |          string
 |      :param end: the object conveying the time value for the end query
 |          boundary (defaults to ``None``)
 |      :type end: int, ``datetime.datetime`` or ISO8601-formatted string
 |      :returns: a list of *Weather* instances or ``None`` if history data is
 |          not available for the specified location
 |      :raises: *ParseResponseException* when OWM web API responses' data
 |          cannot be parsed, *APICallException* when OWM web API can not be
 |          reached, *ValueError* if the time boundaries are not in the correct
 |          chronological order, if one of the time boundaries is not ``None``
 |          and the other is or if one or both of the time boundaries are after
 |          the current time
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  __abstractmethods__ = frozenset([])
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pyowm.abstractions.owm.OWM:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pyowm.abstractions.owm.OWM:
 |
 |  __metaclass__ = <class 'abc.ABCMeta'>
 |      Metaclass for defining Abstract Base Classes (ABCs).
 |
 |      Use this metaclass to create an ABC.  An ABC can be subclassed
 |      directly, and then acts as a mix-in class.  You can also register
 |      unrelated concrete classes (even built-in classes) and unrelated
 |      ABCs as 'virtual subclasses' -- these and their descendants will
 |      be considered subclasses of the registering ABC by the built-in
 |      issubclass() function, but the registering ABC won't show up in
 |      their MRO (Method Resolution Order) nor will method
 |      implementations defined by the registering ABC be callable (not
 |      even via super()).

None

Process finished with exit code 0
